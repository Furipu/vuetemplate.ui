/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export interface IAssetClient {
    /**
     * @return Success
     */
    getAllAssets(): Promise<GetAllAssetsDto>;
}

export class AssetClient implements IAssetClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getAllAssets(  cancelToken?: CancelToken | undefined): Promise<GetAllAssetsDto> {
        let url_ = this.baseUrl + "/api/Asset";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetAllAssets(_response);
        });
    }

    protected processGetAllAssets(response: AxiosResponse): Promise<GetAllAssetsDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetAllAssetsDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetAllAssetsDto>(<any>null);
    }
}

export interface IMetricClient {
    /**
     * @return Success
     */
    getMetrics(): Promise<GetMetricDto>;
}

export class MetricClient implements IMetricClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getMetrics(  cancelToken?: CancelToken | undefined): Promise<GetMetricDto> {
        let url_ = this.baseUrl + "/api/Metric";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <AxiosRequestConfig>{
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetMetrics(_response);
        });
    }

    protected processGetMetrics(response: AxiosResponse): Promise<GetMetricDto> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = GetMetricDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetMetricDto>(<any>null);
    }
}

export interface ISupplierClient {
    /**
     * @param body (optional) 
     * @return Success
     */
    addSupplier(body?: AddSupplierDto | undefined): Promise<boolean>;
}

export class SupplierClient implements ISupplierClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {
        this.instance = instance ? instance : axios.create();
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    addSupplier(body?: AddSupplierDto | undefined , cancelToken?: CancelToken | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Supplier";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ = <AxiosRequestConfig>{
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processAddSupplier(_response);
        });
    }

    protected processAddSupplier(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(<any>null);
    }
}

export class GetAllAssetsDto implements IGetAllAssetsDto {
    assets?: GetAllAssetsDto[] | null;
    id?: string;
    supplier?: string | null;
    amount?: number;
    isPayed?: boolean;

    constructor(data?: IGetAllAssetsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.assets) {
                this.assets = [];
                for (let i = 0; i < data.assets.length; i++) {
                    let item = data.assets[i];
                    this.assets[i] = item && !(<any>item).toJSON ? new GetAllAssetsDto(item) : <GetAllAssetsDto>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["assets"])) {
                this.assets = [] as any;
                for (let item of _data["assets"])
                    this.assets!.push(GetAllAssetsDto.fromJS(item));
            }
            else {
                this.assets = <any>null;
            }
            this.id = _data["id"] !== undefined ? _data["id"] : <any>null;
            this.supplier = _data["supplier"] !== undefined ? _data["supplier"] : <any>null;
            this.amount = _data["amount"] !== undefined ? _data["amount"] : <any>null;
            this.isPayed = _data["isPayed"] !== undefined ? _data["isPayed"] : <any>null;
        }
    }

    static fromJS(data: any): GetAllAssetsDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllAssetsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.assets)) {
            data["assets"] = [];
            for (let item of this.assets)
                data["assets"].push(item.toJSON());
        }
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["supplier"] = this.supplier !== undefined ? this.supplier : <any>null;
        data["amount"] = this.amount !== undefined ? this.amount : <any>null;
        data["isPayed"] = this.isPayed !== undefined ? this.isPayed : <any>null;
        return data; 
    }
}

export interface IGetAllAssetsDto {
    assets?: IGetAllAssetsDto[] | null;
    id?: string;
    supplier?: string | null;
    amount?: number;
    isPayed?: boolean;
}

export class ChildrenMetric implements IChildrenMetric {
    childName?: string | null;

    constructor(data?: IChildrenMetric) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.childName = _data["childName"] !== undefined ? _data["childName"] : <any>null;
        }
    }

    static fromJS(data: any): ChildrenMetric {
        data = typeof data === 'object' ? data : {};
        let result = new ChildrenMetric();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["childName"] = this.childName !== undefined ? this.childName : <any>null;
        return data; 
    }
}

export interface IChildrenMetric {
    childName?: string | null;
}

export class ParentMetric implements IParentMetric {
    parentName?: string | null;
    childrenMetrics?: ChildrenMetric[] | null;

    constructor(data?: IParentMetric) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.childrenMetrics) {
                this.childrenMetrics = [];
                for (let i = 0; i < data.childrenMetrics.length; i++) {
                    let item = data.childrenMetrics[i];
                    this.childrenMetrics[i] = item && !(<any>item).toJSON ? new ChildrenMetric(item) : <ChildrenMetric>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.parentName = _data["parentName"] !== undefined ? _data["parentName"] : <any>null;
            if (Array.isArray(_data["childrenMetrics"])) {
                this.childrenMetrics = [] as any;
                for (let item of _data["childrenMetrics"])
                    this.childrenMetrics!.push(ChildrenMetric.fromJS(item));
            }
            else {
                this.childrenMetrics = <any>null;
            }
        }
    }

    static fromJS(data: any): ParentMetric {
        data = typeof data === 'object' ? data : {};
        let result = new ParentMetric();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentName"] = this.parentName !== undefined ? this.parentName : <any>null;
        if (Array.isArray(this.childrenMetrics)) {
            data["childrenMetrics"] = [];
            for (let item of this.childrenMetrics)
                data["childrenMetrics"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IParentMetric {
    parentName?: string | null;
    childrenMetrics?: IChildrenMetric[] | null;
}

export class GetMetricDto implements IGetMetricDto {
    parentMetrics?: ParentMetric[] | null;

    constructor(data?: IGetMetricDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.parentMetrics) {
                this.parentMetrics = [];
                for (let i = 0; i < data.parentMetrics.length; i++) {
                    let item = data.parentMetrics[i];
                    this.parentMetrics[i] = item && !(<any>item).toJSON ? new ParentMetric(item) : <ParentMetric>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["parentMetrics"])) {
                this.parentMetrics = [] as any;
                for (let item of _data["parentMetrics"])
                    this.parentMetrics!.push(ParentMetric.fromJS(item));
            }
            else {
                this.parentMetrics = <any>null;
            }
        }
    }

    static fromJS(data: any): GetMetricDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetMetricDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.parentMetrics)) {
            data["parentMetrics"] = [];
            for (let item of this.parentMetrics)
                data["parentMetrics"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IGetMetricDto {
    parentMetrics?: IParentMetric[] | null;
}

export class AddSupplierDto implements IAddSupplierDto {
    name?: string | null;
    amount?: number | null;
    startDate?: Date;
    endDate?: Date;

    constructor(data?: IAddSupplierDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"] !== undefined ? _data["name"] : <any>null;
            this.amount = _data["amount"] !== undefined ? _data["amount"] : <any>null;
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>null;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): AddSupplierDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddSupplierDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name !== undefined ? this.name : <any>null;
        data["amount"] = this.amount !== undefined ? this.amount : <any>null;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>null;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>null;
        return data; 
    }
}

export interface IAddSupplierDto {
    name?: string | null;
    amount?: number | null;
    startDate?: Date;
    endDate?: Date;
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    throw new SwaggerException(message, status, response, headers, result);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}